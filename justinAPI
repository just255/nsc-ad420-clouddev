swagger: "2.0"
info:
  description: "First API for AD420."
  version: "1.0.0"
  title: "AD420"
host: "AD420.swagger.io"
basePath: "/v1"
schemes:
- "http"
paths:
  /users:
    get:
      tags:
      - "users"
      summary: "Search for user"
      operationId: "getUser"
      produces:
      - "application/json"
      parameters:
      - name: "searchString"
        in: "query"
        description: "username to search"
        required: false
        type: "string"
      responses:
        200:
          description: "success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        404:
          description: "User was not found"
    post:
      tags:
      - "users"
      summary: "Add new user"
      operationId: "addUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "newUser"
        description: "new user to add"
        required: false
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "user created"
        400:
          description: "invalid input"
        409:
          description: "user already exists"
  /users/{userId}:
    get:
      tags:
      - "users"
      summary: "Get a user by id"
      description: "Search by user id"
      operationId: "getUserByID"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "id to look up"
        required: true
        type: "integer"
      responses:
        200:
          description: "user found"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "invalid input"
        404:
          description: "user id not found"
    put:
      tags:
      - "users"
      summary: "Update user information"
      description: "update user info"
      operationId: "updateUserInfo"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "updateUser"
        description: "update user info"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        201:
          description: "user updated"
        400:
          description: "invalid ID"
        404:
          description: "user ID not found"
    delete:
      tags:
      - "users"
      summary: "Delete user"
      description: "delete user"
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "userId"
        in: "path"
        description: "user to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "user deleted successfully"
        404:
          description: "user ID not found"
  /users/{id}/tasks:
    get:
      tags:
      - "tasks"
      summary: "Look up a user's tasks"
      description: "find user's tasks"
      operationId: "taskSearch"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "user ID"
        required: true
        type: "integer"
      - name: "taskName"
        in: "query"
        description: "task to find"
        required: false
        type: "string"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Task"
        400:
          description: "bad input"
        404:
          description: "task not found"
    post:
      tags:
      - "tasks"
      summary: "Add a taskm"
      description: "add new task"
      operationId: "taskAdd"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "newTask"
        description: "new task to add"
        required: false
        schema:
          $ref: "#/definitions/Task"
      responses:
        201:
          description: "task created"
        400:
          description: "invalid input"
  /users/{id}/tasks/{id}:
    get:
      tags:
      - "tasks"
      summary: "Look up a task by ID"
      description: "find a task"
      operationId: "taskIdSearch"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "user ID"
        required: true
        type: "integer"
      - name: "taskName"
        in: "query"
        description: "find a task"
        required: false
        type: "string"
      responses:
        200:
          description: "task found"
          schema:
            $ref: "#/definitions/Task"
        400:
          description: "bad input"
        404:
          description: "task not found"
    put:
      tags:
      - "tasks"
      summary: "Update a user's task"
      description: "update task"
      operationId: "updateTask"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "updateTask"
        description: "task to update"
        required: true
        schema:
          $ref: "#/definitions/Task"
      responses:
        201:
          description: "task updated"
        400:
          description: "invalid ID"
        404:
          description: "task ID not found"
    delete:
      tags:
      - "tasks"
      summary: "Delete a user's task"
      description: "delete task"
      operationId: "deleteTask"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "task ID to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "deleted successfully"
        400:
          description: "invalid ID supplied"
        404:
          description: "task ID not found"
definitions:
  User:
    type: "object"
    required:
    - "userId"
    - "userName"
    properties:
      userId:
        type: "integer"
        format: "int64"
        example: 1234567890
      userName:
        type: "string"
        example: "spiderman64"
      firstName:
        type: "string"
        example: "John"
      lastName:
        type: "string"
        example: "Smith"
      tasks:
        type: "array"
        items:
          $ref: "#/definitions/Task"
  Task:
    required:
    - "taskId"
    - "taskName"
    properties:
      taskId:
        type: "integer"
        format: "int64"
        example: 987654321
      taskName:
        type: "string"
        example: "Take out garbage"
      complete:
        type: "boolean"
        default: false
